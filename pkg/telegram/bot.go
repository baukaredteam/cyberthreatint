package telegram

import (
	"fmt"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/sirupsen/logrus"
	"phishing-monitor/pkg/models"
)

type Bot struct {
	api    *tgbotapi.BotAPI
	chatID int64
}

func NewBot(token string, chatID int64) (*Bot, error) {
	api, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Telegram –±–æ—Ç–∞: %w", err)
	}

	api.Debug = false
	logrus.Infof("Telegram –±–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: %s", api.Self.UserName)

	return &Bot{
		api:    api,
		chatID: chatID,
	}, nil
}

func (b *Bot) SendSuspiciousDomainAlert(domain *models.SuspiciousDomain) error {
	message := b.formatSuspiciousDomainMessage(domain)
	
	msg := tgbotapi.NewMessage(b.chatID, message)
	msg.ParseMode = "HTML"
	
	_, err := b.api.Send(msg)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: %w", err)
	}
	
	return nil
}

func (b *Bot) SendStatusUpdate(message string) error {
	msg := tgbotapi.NewMessage(b.chatID, message)
	_, err := b.api.Send(msg)
	return err
}

func (b *Bot) formatSuspiciousDomainMessage(domain *models.SuspiciousDomain) string {
	var builder strings.Builder
	
	// –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
	var icon string
	switch domain.Confidence {
	case "high":
		icon = "üî¥"
	case "medium":
		icon = "üü°"
	default:
		icon = "üü¢"
	}
	
	builder.WriteString(fmt.Sprintf("%s <b>–ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ô –î–û–ú–ï–ù –û–ë–ù–ê–†–£–ñ–ï–ù</b>\n\n", icon))
	
	// –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
	builder.WriteString(fmt.Sprintf("üéØ <b>–î–æ–º–µ–Ω:</b> <code>%s</code>\n", domain.Domain))
	builder.WriteString(fmt.Sprintf("üè¢ <b>–ö–ª–∏–µ–Ω—Ç:</b> %s\n", domain.ClientDomain))
	builder.WriteString(fmt.Sprintf("üìä <b>–°—Ö–æ–∂–µ—Å—Ç—å:</b> %.2f%%\n", domain.Similarity*100))
	builder.WriteString(fmt.Sprintf("‚ö†Ô∏è <b>–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:</b> %s\n", strings.ToUpper(domain.Confidence)))
	builder.WriteString(fmt.Sprintf("üì° <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> %s\n", domain.Source))
	
	// –§–ª–∞–≥ —Ñ–∏—à–∏–Ω–≥–∞
	if domain.IsPhishing {
		builder.WriteString("üö® <b>–§–ò–®–ò–ù–ì:</b> –î–∞\n")
	} else {
		builder.WriteString("‚úÖ <b>–§–ò–®–ò–ù–ì:</b> –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω\n")
	}
	
	// –ó–∞–º–µ—Ç–∫–∏
	if domain.Notes != "" {
		builder.WriteString(fmt.Sprintf("üìù <b>–ó–∞–º–µ—Ç–∫–∏:</b> %s\n", domain.Notes))
	}
	
	// –í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
	builder.WriteString(fmt.Sprintf("üïí <b>–í—Ä–µ–º—è:</b> %s\n", 
		domain.CreatedAt.Format("02.01.2006 15:04:05")))
	
	// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
	builder.WriteString("\n<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n")
	if domain.Confidence == "high" || domain.IsPhishing {
		builder.WriteString("‚Ä¢ –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–º–µ–Ω\n")
		builder.WriteString("‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ–º–µ–Ω –≤ DNS/Proxy\n")
		builder.WriteString("‚Ä¢ –£–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞\n")
	} else {
		builder.WriteString("‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–º–µ–Ω –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Ñ–∏—à–∏–Ω–≥–∞\n")
		builder.WriteString("‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n")
	}
	
	// –°—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
	builder.WriteString(fmt.Sprintf("\n<b>–ü—Ä–æ–≤–µ—Ä–∫–∞:</b>\n"))
	builder.WriteString(fmt.Sprintf("‚Ä¢ <a href=\"https://www.virustotal.com/gui/domain/%s\">VirusTotal</a>\n", domain.Domain))
	builder.WriteString(fmt.Sprintf("‚Ä¢ <a href=\"https://urlvoid.com/scan/%s\">URLVoid</a>\n", domain.Domain))
	builder.WriteString(fmt.Sprintf("‚Ä¢ <a href=\"https://whois.net/whois/%s\">WHOIS</a>\n", domain.Domain))
	
	return builder.String()
}

func (b *Bot) SendDailyReport(domains []models.SuspiciousDomain) error {
	if len(domains) == 0 {
		message := "üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç</b>\n\n‚úÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."
		return b.SendStatusUpdate(message)
	}
	
	var builder strings.Builder
	builder.WriteString("üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n")
	builder.WriteString(fmt.Sprintf("üìà <b>–í—Å–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ:</b> %d –¥–æ–º–µ–Ω–æ–≤\n\n", len(domains)))
	
	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º
	clientStats := make(map[string]int)
	highRiskCount := 0
	
	for _, domain := range domains {
		clientStats[domain.ClientDomain]++
		if domain.Confidence == "high" || domain.IsPhishing {
			highRiskCount++
		}
	}
	
	builder.WriteString("<b>–ü–æ –∫–ª–∏–µ–Ω—Ç–∞–º:</b>\n")
	for client, count := range clientStats {
		builder.WriteString(fmt.Sprintf("‚Ä¢ %s: %d –¥–æ–º–µ–Ω–æ–≤\n", client, count))
	}
	
	builder.WriteString(fmt.Sprintf("\nüö® <b>–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫:</b> %d –¥–æ–º–µ–Ω–æ–≤\n", highRiskCount))
	
	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–æ–º–µ–Ω–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º
	if highRiskCount > 0 {
		builder.WriteString("\n<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–º–µ–Ω—ã –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞:</b>\n")
		count := 0
		for _, domain := range domains {
			if (domain.Confidence == "high" || domain.IsPhishing) && count < 5 {
				builder.WriteString(fmt.Sprintf("‚Ä¢ <code>%s</code> (%.0f%%)\n", 
					domain.Domain, domain.Similarity*100))
				count++
			}
		}
	}
	
	msg := tgbotapi.NewMessage(b.chatID, builder.String())
	msg.ParseMode = "HTML"
	
	_, err := b.api.Send(msg)
	return err
}

func (b *Bot) StartCommandHandler() {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.api.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		switch update.Message.Command() {
		case "start":
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, 
				"üõ°Ô∏è Phishing Monitor –∞–∫—Ç–∏–≤–µ–Ω!\n\n–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–æ–º–µ–Ω–∞—Ö.")
			b.api.Send(msg)
		case "status":
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, 
				fmt.Sprintf("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω\nüïí –í—Ä–µ–º—è: %s", time.Now().Format("02.01.2006 15:04:05")))
			b.api.Send(msg)
		}
	}
}