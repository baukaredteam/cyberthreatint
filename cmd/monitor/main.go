package main

import (
	"context"
	"os"
	"os/signal"
	"sync"
	"syscall"
	"time"

	"github.com/robfig/cron/v3"
	"github.com/sirupsen/logrus"

	"phishing-monitor/config"
	"phishing-monitor/pkg/certstream"
	"phishing-monitor/pkg/models"
	"phishing-monitor/pkg/phishing"
	"phishing-monitor/pkg/storage"
	"phishing-monitor/pkg/telegram"
	"phishing-monitor/pkg/updater"
)

type MonitorService struct {
	config       *config.Config
	storage      *storage.Storage
	detector     *phishing.Detector
	certClient   *certstream.Client
	telegramBot  *telegram.Bot
	updater      *updater.SourceUpdater
	cron         *cron.Cron
	ctx          context.Context
	cancel       context.CancelFunc
	wg           sync.WaitGroup
}

func main() {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	logrus.SetFormatter(&logrus.TextFormatter{
		FullTimestamp: true,
	})

	// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	cfg := config.Load()
	
	level, err := logrus.ParseLevel(cfg.LogLevel)
	if err != nil {
		level = logrus.InfoLevel
	}
	logrus.SetLevel(level)

	logrus.Info("üöÄ –ó–∞–ø—É—Å–∫ Phishing Monitor...")

	// –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
	service, err := NewMonitorService(cfg)
	if err != nil {
		logrus.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞: %v", err)
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	go func() {
		<-sigChan
		logrus.Info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å...")
		cancel()
	}()

	// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
	if err := service.Start(ctx); err != nil {
		logrus.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: %v", err)
	}

	logrus.Info("üëã Phishing Monitor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}

func NewMonitorService(cfg *config.Config) (*MonitorService, error) {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
	storage, err := storage.NewStorage(cfg.DatabasePath)
	if err != nil {
		return nil, err
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ —Ñ–∏—à–∏–Ω–≥–∞
	detector := phishing.NewDetector(cfg.ClientDomains, cfg.SimilarityThreshold)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Certstream –∫–ª–∏–µ–Ω—Ç–∞
	certClient := certstream.NewClient(cfg.CertstreamURL)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
	telegramBot, err := telegram.NewBot(cfg.TelegramBotToken, cfg.TelegramChatID)
	if err != nil {
		return nil, err
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª—è—Ç–æ—Ä–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
	sourceUpdater := updater.NewSourceUpdater(storage)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è cron –¥–ª—è –∑–∞–¥–∞—á –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
	cronScheduler := cron.New(cron.WithSeconds())

	ctx, cancel := context.WithCancel(context.Background())

	return &MonitorService{
		config:      cfg,
		storage:     storage,
		detector:    detector,
		certClient:  certClient,
		telegramBot: telegramBot,
		updater:     sourceUpdater,
		cron:        cronScheduler,
		ctx:         ctx,
		cancel:      cancel,
	}, nil
}

func (s *MonitorService) Start(ctx context.Context) error {
	s.ctx = ctx

	// –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
	logrus.Info("–í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö...")
	if err := s.updater.UpdateAllSources(); err != nil {
		logrus.Errorf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –¥–æ–º–µ–Ω–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	s.initializeClientDomains()

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Certstream
	if err := s.certClient.Connect(); err != nil {
		return err
	}

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ cron –∑–∞–¥–∞—á
	s.setupCronJobs()

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ
	s.telegramBot.SendStatusUpdate("üõ°Ô∏è Phishing Monitor –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É!")

	// –ó–∞–ø—É—Å–∫ –≥–æ—Ä—É—Ç–∏–Ω
	s.wg.Add(3)
	go s.runCertStreamMonitoring()
	go s.runTelegramBot()
	go s.runCronScheduler()

	// –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	<-ctx.Done()
	return s.shutdown()
}

func (s *MonitorService) initializeClientDomains() {
	for _, domain := range s.config.ClientDomains {
		if err := s.storage.SaveClientDomain(domain, "Unknown"); err != nil {
			if !contains(err.Error(), "UNIQUE") {
				logrus.Debugf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –¥–æ–º–µ–Ω–∞ %s: %v", domain, err)
			}
		}
	}
}

func (s *MonitorService) setupCronJobs() {
	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
	s.cron.AddFunc("0 0 */6 * * *", func() {
		logrus.Info("–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö...")
		if err := s.updater.UpdateAllSources(); err != nil {
			logrus.Errorf("–û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %v", err)
		}
	})

	// –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≤ 9:00
	s.cron.AddFunc("0 0 9 * * *", func() {
		s.sendDailyReport()
	})
}

func (s *MonitorService) runCertStreamMonitoring() {
	defer s.wg.Done()

	s.certClient.Start()
	domainChan := s.certClient.GetDomainChannel()

	for {
		select {
		case <-s.ctx.Done():
			s.certClient.Stop()
			return
		case domain := <-domainChan:
			s.processDomain(domain)
		}
	}
}

func (s *MonitorService) processDomain(domain string) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ—Ç –¥–æ–º–µ–Ω
	if s.storage.DomainExists(domain) {
		return
	}

	// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–º–µ–Ω –Ω–∞ —Ñ–∏—à–∏–Ω–≥
	suspiciousDomain := s.detector.AnalyzeDomain(domain)
	if suspiciousDomain == nil {
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ñ–∏—à–∏–Ω–≥–æ–≤—ã—Ö –¥–æ–º–µ–Ω–æ–≤
	if s.storage.IsKnownPhishingDomain(domain) {
		suspiciousDomain.IsPhishing = true
		suspiciousDomain.Notes += " –î–æ–º–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ —Ñ–∏—à–∏–Ω–≥–æ–≤—ã—Ö –¥–æ–º–µ–Ω–æ–≤."
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	if err := s.storage.SaveSuspiciousDomain(suspiciousDomain); err != nil {
		logrus.Errorf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞: %v", err)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
	if err := s.telegramBot.SendSuspiciousDomainAlert(suspiciousDomain); err != nil {
		logrus.Errorf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %v", err)
	}

	logrus.Infof("–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ–º–µ–Ω: %s (—Å—Ö–æ–∂–µ—Å—Ç—å: %.2f%%)", 
		domain, suspiciousDomain.Similarity*100)
}

func (s *MonitorService) runTelegramBot() {
	defer s.wg.Done()
	// –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go s.telegramBot.StartCommandHandler()
	<-s.ctx.Done()
}

func (s *MonitorService) runCronScheduler() {
	defer s.wg.Done()
	s.cron.Start()
	<-s.ctx.Done()
	s.cron.Stop()
}

func (s *MonitorService) sendDailyReport() {
	// –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–µ–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
	domains, err := s.storage.GetSuspiciousDomains(100)
	if err != nil {
		logrus.Errorf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞: %v", err)
		return
	}

	// –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ–º–µ–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
	var recentDomains []models.SuspiciousDomain
	yesterday := time.Now().Add(-24 * time.Hour)

	for _, domain := range domains {
		if domain.CreatedAt.After(yesterday) {
			recentDomains = append(recentDomains, domain)
		}
	}

	if err := s.telegramBot.SendDailyReport(recentDomains); err != nil {
		logrus.Errorf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: %v", err)
	}
}

func (s *MonitorService) shutdown() error {
	logrus.Info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞...")
	
	s.cancel()
	s.wg.Wait()
	
	if err := s.storage.Close(); err != nil {
		logrus.Errorf("–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: %v", err)
		return err
	}

	logrus.Info("–°–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	return nil
}

func contains(s, substr string) bool {
	return len(s) >= len(substr) && s[:len(substr)] == substr
}